---
description: 
globs: 
alwaysApply: true
---
# Supabase Swift Project Structure

This document outlines the complete directory structure of the supabase-swift project, including all source files, folders, and their purposes.

## Root Directory Structure

```
supabase-swift/
├── .cursor/                    # Cursor IDE configuration
│   └── rules/                  # Cursor rules and guidelines
├── .github/                    # GitHub workflows and templates
├── .swiftpm/                   # Swift Package Manager cache
├── .vscode/                    # VS Code configuration
├── .build/                     # Build artifacts
├── Sources/                    # Main source code
├── Tests/                      # Test files
├── Examples/                   # Example applications
├── docs/                       # Documentation
├── scripts/                    # Build and utility scripts
├── supabase/                   # Supabase local development
├── Supabase.xcworkspace/       # Xcode workspace
├── Supabase.xcodeproj/         # Xcode project
├── Package.swift               # Swift Package Manager manifest
├── Package.resolved            # Dependency lock file
├── README.md                   # Project documentation
├── CHANGELOG.md                # Version history
├── LICENSE                     # License file
├── Makefile                    # Build automation
├── Dockerfile                  # Container configuration
└── Various config files        # .gitignore, .editorconfig, etc.
```

## Sources Directory (`Sources/`)

The main source code is organized into modules:

### Auth Module (`Sources/Auth/`)
Authentication and user management functionality.

**Core Files:**
- `AuthClient.swift` - Main authentication client (47KB, 1450 lines)
- `Types.swift` - Authentication types and models (31KB, 1028 lines)
- `AuthError.swift` - Authentication error definitions (13KB, 300 lines)
- `AuthAdmin.swift` - Admin authentication operations (7.4KB, 204 lines)
- `AuthMFA.swift` - Multi-factor authentication (6.2KB, 163 lines)
- `AuthClientConfiguration.swift` - Client configuration (5.1KB, 136 lines)
- `AuthStateChangeListener.swift` - State change handling (644B, 26 lines)

**Subdirectories:**
- `Internal/` - Internal implementation details
- `Storage/` - Local storage implementations
  - `AuthLocalStorage.swift`
  - `KeychainLocalStorage.swift`
  - `WinCredLocalStorage.swift`

**Support Files:**
- `Exports.swift` - Module exports
- `Defaults.swift` - Default configurations
- `Deprecated.swift` - Deprecated functionality

### PostgREST Module (`Sources/PostgREST/`)
Database query building and execution.

**Core Files:**
- `PostgrestFilterBuilder.swift` - Query filtering (17KB, 597 lines)
- `PostgrestQueryBuilder.swift` - Query construction (6.9KB, 192 lines)
- `PostgrestTransformBuilder.swift` - Data transformations (6.3KB, 173 lines)
- `PostgrestClient.swift` - Database client (7.0KB, 212 lines)
- `PostgrestBuilder.swift` - Base query builder (4.2KB, 146 lines)
- `PostgrestFilterValue.swift` - Filter value handling (2.1KB, 86 lines)
- `Types.swift` - Database types (2.6KB, 89 lines)

**Support Files:**
- `Exports.swift` - Module exports
- `Defaults.swift` - Default configurations
- `Deprecated.swift` - Deprecated functionality

### Realtime Module (`Sources/Realtime/`)
Real-time subscriptions and WebSocket handling.

**Core Files:**
- `RealtimeChannelV2.swift` - Channel management (18KB, 626 lines)
- `RealtimeClientV2.swift` - Real-time client (16KB, 604 lines)
- `RealtimeChannel+AsyncAwait.swift` - Async/await support (5.3KB, 200 lines)
- `CallbackManager.swift` - Event callback management (4.6KB, 208 lines)
- `PresenceAction.swift` - Presence functionality (4.1KB, 143 lines)
- `RealtimeJoinConfig.swift` - Join configuration (2.4KB, 95 lines)
- `PostgresAction.swift` - PostgreSQL actions (2.2KB, 92 lines)
- `RealtimeMessageV2.swift` - Message handling (1.8KB, 82 lines)
- `PushV2.swift` - Push notifications (1.4KB, 62 lines)
- `RealtimePostgresFilter.swift` - PostgreSQL filtering (1.3KB, 37 lines)
- `RealtimePostgresFilterValue.swift` - Filter values (983B, 42 lines)
- `Types.swift` - Real-time types (3.0KB, 109 lines)
- `PostgresActionData.swift` - Action data (455B, 25 lines)
- `RealtimeError.swift` - Error definitions (260B, 17 lines)

**Subdirectories:**
- `WebSocket/` - WebSocket implementation
  - `URLSessionWebSocket.swift`
  - `WebSocket.swift`
- `Deprecated/` - Deprecated real-time functionality

**Support Files:**
- `Exports.swift` - Module exports

### Storage Module (`Sources/Storage/`)
File storage and bucket management.

**Core Files:**
- `StorageFileApi.swift` - File operations (22KB, 687 lines)
- `MultipartFormData.swift` - Form data handling (24KB, 692 lines)
- `StorageBucketApi.swift` - Bucket operations (3.2KB, 110 lines)
- `StorageApi.swift` - Storage API (1.9KB, 78 lines)
- `StorageHTTPClient.swift` - HTTP client (808B, 29 lines)
- `TransformOptions.swift` - Image transformations (1.8KB, 59 lines)
- `BucketOptions.swift` - Bucket configuration (1.1KB, 21 lines)
- `Helpers.swift` - Utility functions (2.4KB, 88 lines)
- `Types.swift` - Storage types (6.4KB, 253 lines)
- `SupabaseStorage.swift` - Main storage client (1.0KB, 36 lines)
- `Codable.swift` - Codable support (671B, 28 lines)
- `StorageError.swift` - Error definitions (439B, 20 lines)

**Support Files:**
- `Exports.swift` - Module exports
- `Deprecated.swift` - Deprecated functionality

### Functions Module (`Sources/Functions/`)
Edge function invocation.

**Core Files:**
- `FunctionsClient.swift` - Function client (9.6KB, 309 lines)
- `Types.swift` - Function types (5.1KB, 172 lines)

**Support Files:**
- `Exports.swift` - Module exports

### Helpers Module (`Sources/Helpers/`)
Shared utilities and common functionality.

**Core Files:**
- `URLSessionAbstraction.swift` - HTTP client abstraction (20KB, 613 lines)
- `URLSession+AsyncAwait.swift` - Async HTTP support (5.1KB, 166 lines)
- `SupabaseLogger.swift` - Logging functionality (5.3KB, 217 lines)
- `AsyncValueSubject.swift` - Async value handling (4.2KB, 137 lines)
- `EventEmitter.swift` - Event system (3.5KB, 138 lines)
- `FoundationExtensions.swift` - Foundation extensions (2.3KB, 89 lines)
- `DateFormatter.swift` - Date formatting (2.2KB, 77 lines)
- `Task+withTimeout.swift` - Task timeout support (805B, 40 lines)
- `TaskLocalHelpers.swift` - Task local utilities (1.2KB, 50 lines)
- `_Clock.swift` - Time utilities (1.4KB, 61 lines)
- `Codable.swift` - Codable utilities (1.0KB, 42 lines)
- `JWT.swift` - JWT handling (1.1KB, 41 lines)
- `Version.swift` - Version information (1.7KB, 69 lines)

**Subdirectories:**
- `HTTP/` - HTTP utilities
  - `HTTPClient.swift`
  - `HTTPFields.swift`
  - `HTTPRequest.swift`
  - `HTTPResponse.swift`
  - `HTTPStatus.swift`
- `AnyJSON/` - JSON handling
  - `AnyJSON.swift`
  - `AnyJSON+Codable.swift`
- `SharedModels/` - Shared data models
  - `HTTPError.swift`
  - `PostgrestError.swift`

### Supabase Module (`Sources/Supabase/`)
Main client and entry point.

**Core Files:**
- `SupabaseClient.swift` - Main client (12KB, 422 lines)
- `Types.swift` - Client types (5.7KB, 177 lines)
- `Constants.swift` - Constants (418B, 25 lines)
- `Exports.swift` - Module exports (243B, 14 lines)
- `Deprecated.swift` - Deprecated functionality (603B, 27 lines)

### TestHelpers Module (`Sources/TestHelpers/`)
Testing utilities and mocks.

**Core Files:**
- `URLRequestSnapshot.swift` - Request snapshotting (3.1KB, 111 lines)
- `HTTPClientMock.swift` - HTTP client mocking (1.5KB, 65 lines)
- `MockExtensions.swift` - Mock extensions (1.2KB, 48 lines)
- `InMemoryLocalStorage.swift` - In-memory storage (571B, 30 lines)
- `WithMainSerialExecutor+Windows.swift` - Windows executor (324B, 18 lines)
- `AsyncSequence.swift` - Async sequence utilities (245B, 15 lines)

**Support Files:**
- `Exports.swift` - Module exports

## Tests Directory (`Tests/`)

Test files mirror the source structure:

- `AuthTests/` - Authentication tests
- `PostgRESTTests/` - Database tests
- `RealtimeTests/` - Real-time tests
- `StorageTests/` - Storage tests
- `FunctionsTests/` - Function tests
- `HelpersTests/` - Helper utility tests
- `SupabaseTests/` - Main client tests
- `IntegrationTests/` - End-to-end tests

## Examples Directory (`Examples/`)

Example applications demonstrating usage:

- `Examples/` - Basic examples app
- `SlackClone/` - Slack-like chat application
- `UserManagement/` - User management demo
- `SupaAI/` - AI integration example
- `SupaDrive/` - File storage example
- `Playground/` - Development playground
- `ExamplesWidget/` - Widget examples
- `UserManagementWatch Watch App/` - Apple Watch example

## Configuration Files

**Build Configuration:**
- `Package.swift` - Swift Package Manager manifest
- `Package.resolved` - Dependency lock file
- `Makefile` - Build automation
- `Dockerfile` - Container configuration

**Development Configuration:**
- `.gitignore` - Git ignore patterns
- `.editorconfig` - Editor configuration
- `.spi.yml` - Swift Package Index configuration
- `release-please-config.json` - Release automation

**Documentation:**
- `README.md` - Project overview
- `CHANGELOG.md` - Version history
- `LICENSE` - License information

## Important Patterns

1. **Module Organization**: Each module has its own directory with clear separation of concerns
2. **Exports**: Each module has an `Exports.swift` file defining public API
3. **Deprecated Code**: Deprecated functionality is kept in `Deprecated.swift` files
4. **Defaults**: Default configurations are in `Defaults.swift` files
5. **Types**: Type definitions are centralized in `Types.swift` files
6. **Test Structure**: Tests mirror the source structure for easy navigation
7. **Examples**: Multiple example applications demonstrate different use cases

## File Size Guidelines

- **Large Files (>10KB)**: Core implementation files like `AuthClient.swift`, `StorageFileApi.swift`
- **Medium Files (1-10KB)**: Feature implementations and builders
- **Small Files (<1KB)**: Utilities, types, and configuration files

## Development Workflow

1. **Source Code**: Add new features in appropriate module under `Sources/`
2. **Tests**: Add corresponding tests in `Tests/` directory
3. **Examples**: Update or add examples in `Examples/` directory
4. **Documentation**: Update `README.md` and `CHANGELOG.md` as needed
5. **Configuration**: Update `Package.swift` for new dependencies
